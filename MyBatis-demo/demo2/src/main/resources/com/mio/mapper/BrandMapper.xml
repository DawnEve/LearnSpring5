<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mio.mapper.BrandMapper">
    <!-- statement 语句 -->

    <!-- 数据库字段名 和 pojo 属性名不一致，数据不能自动封装
        * 方案1：使用别名，让别名和 pojo 属性名一致：每次查询都要写一次，重复
        * 方案2：使用sql片段，就是把重复的部分定义到一个标签内，下次引用。这可能导致一堆sql片段，不灵活
        * 方案3：resultMap，最常用的方案
    <sql id="brand_column">
        id, brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>

    <select id="selectAll" resultType="brand">
        select
            <include refid="brand_column"></include>
        from tb_brand;
    </select>
     -->

    <!-- 步骤：1.定义resultMap标签，2.在select查询标签中使用resultMap属性替换resultType
        id: 唯一标示
        type: 原来select标签的 resultType，支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!-- 完成映射 column 表的字段名，property 实体类的属性名
            id: 完成主键字段的映射
            result: 一般字段的映射
        -->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


<!--    <select id="selectById" resultType="brand">-->
    <!--
        * 参数占位符：
            1. #{} 替换为?，为了防止SQL注入【传参时用#{}】
            2. ${} 拼接参数，会存在SQL注入问题，不安全；速度会快一点
            使用场合：
                * 用户参数传递：使用 #{}，不要相信用户的输入
                * 程序员自己的参数，可以信任自己，用来替换不固定的表名或列名，可以使用 ${}
        * 参数类型 <select parameterType="int"，可省略，一般不写
        * 特殊字符的传参：id>10没问题，但是id<10就报错!
            1 使用转义字符(就是实体entity): &lt; 代替<
            2 CDATA区: xml中输入CD，IDEA会提醒自动补齐:
                <![CDATA[
                    这里写什么都可以，包括<
                ]]>
     -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id=#{id};
    </select>


    <!-- 多条件查询 -->
<!--    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
            status = #{status}
            and company_name like #{companyName}
            and brand_name like #{brandName}
    </select>-->

    <!-- 动态条件查询
        * if 条件判断
            * test 逻辑表达式
        * 问题: 多个and时，第一个语句没有值导致sql后的where直接跟着第二个语句的and，会报错！
            * 方法1 where后加恒等式 1=1，然后多个if语句都加上and开头。
            * where 标签替换where关键字
     -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <!-- 注意：这里test使用的是java传过来的值，与mysql无关。所以变量名要使用java的 -->
            <if test="companyName !=null and companyName!='' ">
                and company_name like #{companyName}
            </if>
            <if test="brandName !=null and brandName!='' ">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <!-- 单条件动态查询 -->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> <!-- 类似 switch -->
            <when test="status!=null"> <!-- 类似 case -->
                status=#{status}
            </when>
            <when test="companyName !=null and companyName !=''">
                company_name like #{companyName}
            </when>
            <when test="brandName !=null and brandName !=''">
                brand_name like #{brandName}
            </when>
            <otherwise> <!-- 类似 default -->
                1=1
            </otherwise>
        </choose>
    </select>


    <!-- 添加数据 -->
    <insert id="add">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values(#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!-- 添加数据，并返回主键id
        useGeneratedKeys="true" 说名要获取自动获取的键
        keyProperty="id" 绑定要获取的属性名称
    -->
    <insert id="add2" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values(#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>


    <!-- 修改数据 -->
    <update id="update">
        update tb_brand
        set
            brand_name=#{brandName},
            company_name=#{companyName},
            ordered=#{ordered},
            description=#{description},
            status=#{status}
        where id=#{id}
    </update>

    <!-- 修改数据: 动态修改 -->
    <update id="updateDyn">
        update tb_brand
        <set> <!-- 使用set标签 代替 set 关键字，能自动处理异常：最后一个是逗号？set后是空？ -->
            <if test="brandName != null and brandName != '' ">
                brand_name=#{brandName},
            </if>
            <if test="companyName != null and companyName != '' ">
                company_name=#{companyName},
            </if>
            <if test="ordered != null "> <!-- int 类型，只需要判断是否是null -->
                ordered=#{ordered},
            </if>
            <if test="description != null and description != '' ">
                description=#{description},
            </if>
            <if test="status != null">
                status=#{status}
            </if>
        </set>
        where
            id=#{id}
    </update>
</mapper>